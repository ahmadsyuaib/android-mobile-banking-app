@startuml
title React Native WebView Dataflow (Expo Router → Native)

actor User

participant "App.js" as App
participant "WebviewHandler.js" as WebviewHandler
participant "expo-router" as Router
participant "routing.js" as RoutingJS

User -> App: clicks button
activate App
App -> WebviewHandler: handleOpenWebview()
activate WebviewHandler
WebviewHandler -> Router: router.push({ pathname, params })
activate Router
Router -> RoutingJS: linkTo()
activate RoutingJS
RoutingJS -> RoutingJS: add(action)
RoutingJS --> Router: return
deactivate RoutingJS
Router --> WebviewHandler: return
deactivate Router
WebviewHandler --> App: return
deactivate WebviewHandler


App -> InAppWebViewScreen: render()
activate InAppWebViewScreen
InAppWebViewScreen -> WebViewJS: <WebView ...props/> jsx element
activate WebViewJS

note right of WebViewJS
Props include:
- ref={webref}
- source={uri}
- onLoadStart / onLoadEnd
- onNavigationStateChange
- setSupportMultipleWindows
- originsWhitelist
- onShouldStartLoadWithRequest
- bounces
end note

WebViewJS -> WebViewAndroid: exported from WebView.android.tsx
activate WebViewAndroid
WebViewAndroid -> WebViewComponent: Object.assign(WebViewComponent,…)
activate WebViewComponent
WebViewComponent -> NativeWebView: return initialized NativeWebView jsx element
activate NativeWebView

note right of WebViewComponent
Default Android variables:
- overScrollMode = 'always'
- javaScriptEnabled = true
- thirdPartyCookiesEnabled = true
- scalesPageToFit = true
- allowsFullscreenVideo = false
- allowFileAccess = false
- saveFormDataDisabled = false
- cacheEnabled = true
- androidLayerType = 'none'
- originsWhitelist = defaultOriginsWhitelist
- setSupportMultipleWindows = true
- setBuiltInZoomControls = true
- setDisplayZoomControls = false
- nestedScrollEnabled = false
end note

note right of NativeWebView
key="webViewKey"
{...otherProps}
messagingEnabled={typeof onMessageProp === 'function'}
messagingModuleName={messagingModuleName}
hasOnScroll={!!otherProps.onScroll}
onLoadingError={onLoadingError}
onLoadingFinish={onLoadingFinish}
onLoadingProgress={onLoadingProgress}
onLoadingStart={onLoadingStart}
onHttpError={onHttpError}
onRenderProcessGone={onRenderProcessGone}
onMessage={onMessage}
onOpenWindow={onOpenWindow}
hasOnOpenWindowEvent={onOpenWindowProp !== undefined}
onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}
ref={webViewRef}
source={sourceResolved}
newSource={newSource}
style={webViewStyles}
overScrollMode={overScrollMode}
javaScriptEnabled={javaScriptEnabled} //sets javascriptEnabled to boolean of Webview declared in JS code
thirdPartyCookiesEnabled={thirdPartyCookiesEnabled}
scalesPageToFit={scalesPageToFit}
allowsFullscreenVideo={allowsFullscreenVideo}
allowFileAccess={allowFileAccess}
saveFormDataDisabled={saveFormDataDisabled}
cacheEnabled={cacheEnabled}
androidLayerType={androidLayerType}
setSupportMultipleWindows={setSupportMultipleWindows}
setBuiltInZoomControls={setBuiltInZoomControls}
setDisplayZoomControls={setDisplayZoomControls}
nestedScrollEnabled={nestedScrollEnabled}
injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)}
{...nativeConfig?.props}
end note

NativeWebView -> CodegenNativeComponent: codegenNativeComponent("RNCWebView")
activate CodegenNativeComponent
participant "RNCWebViewManagerImpl.java" as RNCWebViewManagerImpl
CodegenNativeComponent -> RNCWebViewManagerImpl: createViewInstance() // native java code
activate RNCWebViewManagerImpl
RNCWebViewManagerImpl -> RNCWebViewManagerImpl: createRNCWebViewInstance()
participant "RNCWebView.java" as RNCWebView
RNCWebViewManagerImpl -> RNCWebView: new RNCWebView()
activate RNCWebView

participant "android.webkit.WebView" as AndroidWebView  #4CAF50
RNCWebView -> AndroidWebView: extends android.webkit.WebView
activate AndroidWebView
AndroidWebView -> AndroidWebView: setJavascriptEnabled(true)
AndroidWebView --> RNCWebView: return
deactivate AndroidWebView
RNCWebView --> RNCWebViewManagerImpl: return
deactivate RNCWebView
RNCWebViewManagerImpl --> CodegenNativeComponent: return
deactivate RNCWebViewManagerImpl
CodegenNativeComponent --> NativeWebView: return
deactivate CodegenNativeComponent
NativeWebView --> WebViewComponent: return
deactivate NativeWebView
WebViewComponent --> WebViewAndroid: return
deactivate WebViewComponent
WebViewAndroid --> WebViewJS: return
deactivate WebViewAndroid
WebViewJS --> InAppWebViewScreen: return
deactivate WebViewJS
InAppWebViewScreen --> App: return
deactivate InAppWebViewScreen

App --> User: return
deactivate App

@enduml
